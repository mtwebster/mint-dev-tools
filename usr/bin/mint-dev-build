#!/usr/bin/python

import sys, os, commands
from gi.repository import GLib

GROUP = "Mint Development Tools"
SANDBOX_PATH = "DevRoot"
SANDBOX_NAME = "RootDisplayName"
THREADS = "Threads"

user_home = os.path.expanduser('~')
settings = None
settings_path = "%s/mint-dev-tools" % GLib.get_user_config_dir()

class Project:
    def __init__(self, name, subprojects):
        self.name = name
        self.subprojects = subprojects

projects = []
projects.append(Project("Cinnamon (all sub-projects)", ["cinnamon-translations", "cinnamon-desktop", "cinnamon-menus", \
                                                        "cinnamon-session", "cinnamon-settings-daemon", "cinnamon-screensaver", "cjs", \
                                                        "cinnamon-control-center", "muffin", \
                                                        "cinnamon", "nemo"]))
projects.append(Project("cjs", ["cjs"]))
projects.append(Project("cinnamon-desktop", ["cinnamon-desktop"]))
projects.append(Project("cinnamon-menus", ["cinnamon-menus"]))
projects.append(Project("cinnamon-translations", ["cinnamon-translations"]))
projects.append(Project("cinnamon-session", ["cinnamon-session"]))
projects.append(Project("cinnamon-settings-daemon", ["cinnamon-settings-daemon"]))
projects.append(Project("cinnamon-control-center", ["cinnamon-control-center"]))
projects.append(Project("cinnamon-Screensaver", ["cinnamon-screensaver"]))
projects.append(Project("muffin", ["muffin"]))
projects.append(Project("cinnamon", ["cinnamon"]))
projects.append(Project("nemo", ["nemo"]))
projects.append(Project("mdm", ["mdm"]))

simple_projects = ['mintupdate', 'mintsources', 'mintlocale', 'mintsystem', 'mintmenu', 'mint-translations', 'mint-common', 'mint-x-icons', 'mintwelcome', 'mintdesktop', 'cinnamon-themes', 'mintstick', 'mintdrivers', 'mintinstall', 'mintnanny', 'mintupload', 'blueberry', 'mint-themes', 'mint-themes-gtk3']
for simple_project in simple_projects:
    projects.append(Project(simple_project, [simple_project]))

projects = sorted(projects, key=lambda x: x.name, reverse=False)

## Check mint-dev-setup ran successfully
if not os.path.exists(settings_path):
    print ""
    print " === ERROR ==="
    print ""
    print "Your development environment isn't set up properly. Please run mint-dev-setup."
    sys.exit(1)

settings = GLib.KeyFile.new()
settings.load_from_file(settings_path, GLib.KeyFileFlags.KEEP_COMMENTS)

root = settings.get_string(GROUP, SANDBOX_PATH)
name = settings.get_string(GROUP, SANDBOX_NAME)
threads = settings.get_integer(GROUP, THREADS)

print ""
print " === WARNING ==="
print ""
print "This command does the following:"
print "    - Deletes all build outputs your Sandbox (~/%s/*_*)" % name
print "    - (Optionally) Deletes and re-downloads the selected project(s). (~/%s/<projectname>)" % name
print "    - Compiles the selected project(s)"
print "    - Installs the packages produced by the compilation (and overrides local versions)"
print ""
print "If you're scared when reading any of that, PRESS CTRL+C NOW! Otherwise.. press ENTER to continue."
raw_input("")

selected_project = None

while selected_project is None:
    print ""
    print " === PROJECT SELECTION ==="
    print ""
    print "Choose the project you'd like to build (note that this will overwrite the version running on your system):"
    print ""
    i = 1
    while i <= len(projects):
        project = projects[i-1]
        print "  %d. %s" % (i, project.name)
        i+=1
    print ""

    index = 0
    try:
        index = int(raw_input("Please type the number of the project you'd like to build: "))
    except:
        print "Invalid choice"
        sys.exit(1)
    if index > 0 and index <= len(projects):
        selected_project = projects[index-1]

os.chdir(root)
os.system("rm -f *_*") # Remove all packages and build results

already_existing_source = False

for subproject in selected_project.subprojects:
    if os.path.exists(subproject):
        already_existing_source = True
    else:
        already_existing_source = False
        break

build_only = False

if already_existing_source:
    print "Local source(s) already exist.  Please select an option:"
    print ""
    print "  1. Delete existing sources and re-clone from Github"
    print "  2. Build from existing sources (no pre- or post-build cleanup will be performed)"
    print ""
    selection = 1
    try:
        selection = int(raw_input("Please enter your selection - default is 1: "))
    except:
        print "Invalid choice"
        sys.exit(1)
    if selection == 2:
        build_only = True

for subproject in selected_project.subprojects:
    if not build_only:
        print ""
        print "   #######################################################################"
        print "   ### Removing local version (it it exists) and downloading %s" % subproject
        print "   #######################################################################"
        print ""
        if os.path.exists(subproject):
            os.system("rm -rf %s" % subproject)
        os.system("git clone https://github.com/linuxmint/%s.git" % subproject)

    os.chdir(subproject)
    print ""
    print "   #######################################################################"
    print "   ### Ensuring build dependencies and building %s" % subproject
    print "   ### -- You may at various points be asked to confirm installation"
    print "   ###    of build dependencies - please answer yes to these."
    print "   #######################################################################"
    print ""
    os.system("sudo mk-build-deps -i --tool 'apt-get --no-install-recommends -y'")
    os.system("dpkg-buildpackage -j%d" % threads) 
    print ""
    print "   #######################################################################"
    print "   ### Installing %s" % subproject
    print "   #######################################################################"
    print ""
    os.system("sudo dpkg -i ../*.deb")
    print ""
    print "   #######################################################################"
    print "   ### Cleaning up"
    print "   #######################################################################"
    print ""
    if not build_only:
        os.system("git clean -dfx .")
        os.system("git reset --hard")
    os.chdir("..")
    os.system("rm -f *_*")

